rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the caller is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the caller is a member of a specific group
    function isGroupMember(groupId) {
      return get(/databases/$(database)/documents/groups/$(groupId)).data.memberIds.hasAny([request.auth.uid]);
    }

    // Users can read other user profiles and list all users to invite them to groups.
    match /users/{userId} {
      allow list, get: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if isAdmin();
    }

    match /groups/{groupId} {
      allow get: if isGroupMember(groupId);
      // Users can only list the groups they are members of. This query is used on the /groups page.
      allow list: if request.query.get('memberIds_array_contains') == request.auth.uid;
      allow create: if request.auth != null &&
                      request.resource.data.createdById == request.auth.uid &&
                      request.auth.uid in request.resource.data.memberIds;
      // Any group member can add other members.
      allow update: if isGroupMember(groupId);
      // Only the group creator or an admin can delete a group.
      allow delete: if request.auth.uid == resource.data.createdById || isAdmin();
    }

    match /expenses/{expenseId} {
      // A user can read or modify a single expense if they are a member of the group it belongs to.
      allow get, create, update, delete: if isGroupMember(request.resource.data.groupId);

      // Users can list expenses if the query is for a group they belong to,
      // or if it's a query for expenses they paid for or participated in.
      allow list: if (request.query.get('groupId') != null && isGroupMember(request.query.get('groupId'))) ||
                    (request.query.get('paidById') == request.auth.uid) ||
                    (request.query.get('participantIds_array_contains') == request.auth.uid);
    }

    match /settlements/{settlementId} {
      // A user can read or modify a single settlement if they are a member of the group it belongs to.
      allow get, create, update, delete: if isGroupMember(request.resource.data.groupId);

      // Users can list settlements if the query is for a group they belong to,
      // or if it's a query for settlements they paid or received.
      allow list: if (request.query.get('groupId') != null && isGroupMember(request.query.get('groupId'))) ||
                    (request.query.get('paidById') == request.auth.uid) ||
                    (request.query.get('paidToId') == request.auth.uid);
    }
  }
}
