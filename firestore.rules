
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // This is our new debug function.
    function isAdmin() {
      return isSignedIn() && request.auth.token.email == 'jangrayash1505@gmail.com';
    }
    
    function isMemberOfGroup(groupId) {
      return isSignedIn() && get(/databases/$(database)/documents/groups/$(groupId)).data.memberIds.hasAny([request.auth.uid]);
    }
    
    function getGroupMemberIds(groupId) {
        return get(/databases/$(database)/documents/groups/$(groupId)).data.memberIds;
    }
    
    function expenseParticipantsMatch(expenseId) {
        return get(/databases/$(database)/documents/expenses/$(expenseId)).data.participantIds;
    }

    // --- Rules ---

    // Site settings should be publicly readable for appName, etc.
    match /settings/general {
      allow get: if true;
      allow write: if isAdmin(); // Only admins can change settings
    }

    match /users/{userId} {
      // Users can read their own profile, admins can read any.
      allow get: if isUser(userId) || isAdmin();
      
      // Users can create their own profile during signup.
      allow create: if isUser(userId) || isAdmin();
      
      // Users can update their own profile, admins can update any.
      allow update: if isUser(userId) || isAdmin();
      
      // Nobody can delete users from the app directly.
      allow delete: if false; 
    }
    
    match /users/{userId}/{document=**} {
        allow read, write: if isUser(userId) || isAdmin();
    }

    match /groups/{groupId} {
      // Allow read if user is a member of the group, or is an admin.
      allow get: if isMemberOfGroup(groupId) || isAdmin();

      // Allow list query if the user is in the memberIds array being queried, or is an admin.
      allow list: if (isSignedIn() && request.query.filters.map(f => f[2]).hasAny([request.auth.uid])) || isAdmin();
      
      // Allow create for any signed in user.
      allow create: if isSignedIn() || isAdmin();

      // Allow update for any member of the group, or an admin.
      allow update: if isMemberOfGroup(groupId) || isAdmin();

      // Forbid deletion of groups for now.
      allow delete: if false; 
    }
    
     match /expenses/{expenseId} {
        // Read: You can read an expense if you are a member of the group it belongs to.
        allow get: if isMemberOfGroup(resource.data.groupId) || isAdmin();
        
        // List: You can list expenses for a group if you are a member of that group.
        allow list: if (isSignedIn() && request.query.filters.map(f => f[2]).hasAny([request.auth.uid]) && request.query.filters.map(f => f[0]).hasAny(['groupMemberIds'])) || isAdmin();

        // Create: You can create an expense if you are a member of the group.
        allow create: if isMemberOfGroup(request.resource.data.groupId) || isAdmin();

        // Update, Delete: You can update/delete an expense if you are a member of the group.
        allow update, delete: if isMemberOfGroup(resource.data.groupId) || isAdmin();
    }

    match /settlements/{settlementId} {
        // Read: You can read a settlement if you are a member of the group it belongs to.
        allow get: if isMemberOfGroup(resource.data.groupId) || isAdmin();
        
        // List: You can list settlements for a group if you are a member of that group.
        allow list: if (isSignedIn() && request.query.filters.map(f => f[2]).hasAny([request.auth.uid]) && request.query.filters.map(f => f[0]).hasAny(['groupMemberIds'])) || isAdmin();

        // Create: You can create a settlement if you are a member of the group.
        allow create: if isMemberOfGroup(request.resource.data.groupId) || isAdmin();
        
        // No updates to settlements, they must be deleted and recreated.
        allow update: if false;
        
        // Delete: You can delete a settlement if you are a member of the group.
        allow delete: if isMemberOfGroup(resource.data.groupId) || isAdmin();
    }

    match /history/{eventId} {
       // Read, List: You can see history for a group if you are a member.
       allow get, list: if isMemberOfGroup(resource.data.groupId) || isAdmin();
       
       // Create, Update, Delete: History is created by server-side logic (validated by mock-data.ts)
       // and should only be managed by admins from the UI.
       allow create, update, delete: if isSignedIn() || isAdmin();
    }
  }
}
