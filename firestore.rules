
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ===== HELPER FUNCTIONS =====
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      // This is a potentially expensive read, use with caution.
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isGroupMember(groupId) {
        // This is a potentially expensive read.
        return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberIds;
    }

    // ===== USERS =====
    match /users/{userId} {
      // Anyone signed in can view user profiles to find members for groups.
      allow get: if isSignedIn();
      // Admins can list all users.
      allow list: if isAdmin() || isSignedIn();
      
      // A user can create their own profile doc.
      allow create: if isUser(userId);
      
      // A user can only update their own profile. Admins can update any.
      allow update: if isUser(userId) || isAdmin();

      // Deletion is disallowed for now.
      allow delete: if false;
    }
    
    // ===== GROUPS =====
    match /groups/{groupId} {
      // Allow reading a single group document if the user is a member.
      allow get: if isGroupMember(groupId);
      
      // Allow listing groups only via a query where the user is a member.
      allow list: if (request.query.where.size() == 1 &&
                   request.query.where[0].field == "memberIds" &&
                   request.query.where[0].op == "array-contains" &&
                   request.query.where[0].value == request.auth.uid) || isAdmin();

      // A user can create a group if they are the creator and in the member list.
      allow create: if isSignedIn() 
                    && request.resource.data.createdById == request.auth.uid
                    && request.auth.uid in request.resource.data.memberIds;

      // A member can update a group (e.g., add members, change name).
      allow update: if isGroupMember(groupId);

      // A member can delete a group. Could be restricted to creator.
      allow delete: if isGroupMember(groupId) || isAdmin();
    }
    
    // ===== EXPENSES =====
    match /expenses/{expenseId} {
      // Allow reading a single expense doc if the user is a member of the parent group.
      allow get: if isGroupMember(resource.data.groupId);

      // Allow listing expenses if filtering by a group the user is a member of,
      // OR if querying for expenses where the user is a participant.
      allow list: if (request.query.where.size() > 0 &&
                     request.query.where[0].field == 'groupId' &&
                     isGroupMember(request.query.where[0].value))
                  ||
                  (request.query.where.size() > 0 &&
                     request.query.where[0].field == 'participantIds' &&
                     request.query.where[0].op == 'array-contains' &&
                     request.query.where[0].value == request.auth.uid)
                  ||
                  (request.query.where.size() > 0 &&
                     request.query.where[0].field == 'paidById' &&
                     request.query.where[0].op == '==' &&
                     request.query.where[0].value == request.auth.uid)
                  || isAdmin();

      // A group member can create an expense.
      allow create: if isGroupMember(request.resource.data.groupId);

      // A group member can update/delete an expense.
      allow update, delete: if isGroupMember(get(/databases/$(database)/documents/expenses/$(expenseId)).data.groupId) || isAdmin();
    }
    
    // ===== SETTLEMENTS =====
    match /settlements/{settlementId} {
      // Allow reading a single settlement if user is member of the parent group.
      allow get: if isGroupMember(resource.data.groupId);
      
      // Allow listing settlements if filtering by group, or if user is payer/payee.
      allow list: if (request.query.where.size() > 0 &&
                     request.query.where[0].field == 'groupId' &&
                     isGroupMember(request.query.where[0].value))
                  ||
                  (request.query.where.size() > 0 &&
                     request.query.where[0].field == 'paidById' &&
                     request.query.where[0].op == '==' &&
                     request.query.where[0].value == request.auth.uid)
                  ||
                  (request.query.where.size() > 0 &&
                     request.query.where[0].field == 'paidToId' &&
                     request.query.where[0].op == '==' &&
                     request.query.where[0].value == request.auth.uid)
                  || isAdmin();
      
      // A group member can create a settlement.
      allow create: if isGroupMember(request.resource.data.groupId);

      // Only participants in the settlement can delete it.
      allow delete: if isGroupMember(get(/databases/$(database)/documents/settlements/$(settlementId)).data.groupId) || isAdmin();
    }
    
    // ===== HISTORY =====
    match /history/{historyId} {
        // A group member can get a single history event.
        allow get: if isGroupMember(resource.data.groupId);
        
        // A group member can list history for a group they are in.
        allow list: if (request.query.where.size() > 0 &&
                     request.query.where[0].field == 'groupId' &&
                     isGroupMember(request.query.where[0].value)) || isAdmin();

        // Backend/trusted client should create history events.
        // For now, allow group members to create them.
        allow create: if isGroupMember(request.resource.data.groupId)
                       && request.auth.uid == request.resource.data.actorId;

        // Admin can delete history events.
        allow delete: if isAdmin();
        
        // History can only be updated to mark as 'restored'.
        allow update: if request.resource.data.diff(resource.data).affectedKeys().hasOnly(['restored'])
                       && isGroupMember(resource.data.groupId);
    }
  }
}
