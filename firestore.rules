rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---

    // Checks if a user is authenticated.
    function isUserAuthenticated() {
      return request.auth != null;
    }

    // Checks if the authenticated user has the 'admin' role. Involves one document read.
    function isUserAdmin() {
      return isUserAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Checks if the authenticated user is a member of a specific group. Involves one document read.
    function isGroupMember(groupId) {
      // Use exists() to prevent errors if the group document doesn't exist yet (e.g., in a transaction).
      return isUserAuthenticated() && exists(/databases/$(database)/documents/groups/$(groupId)) &&
             request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberIds;
    }
    
    // --- Collection Rules ---

    // USERS collection
    match /users/{userId} {
      // Allow any authenticated user to read any profile (needed for member lists, names, avatars).
      allow read: if isUserAuthenticated();
      
      // Allow a user to create/update their own profile, or an admin to do so.
      allow write: if isUserAuthenticated() && request.auth.uid == userId || isUserAdmin();
    }

    // GROUPS collection
    match /groups/{groupId} {
      // Allow reading a group if the user's UID is in the `memberIds` array.
      // This is efficient for queries like `where('memberIds', 'array-contains', uid)`.
      allow read: if (isUserAuthenticated() && request.auth.uid in resource.data.memberIds) || isUserAdmin();
      
      // Allow any authenticated user to create a group.
      allow create: if isUserAuthenticated();
      
      // Allow the group's creator or an admin to update/delete the group.
      allow update, delete: if (isUserAuthenticated() && request.auth.uid == resource.data.createdById) || isUserAdmin();
    }

    // EXPENSES collection
    match /expenses/{expenseId} {
      // Allow reading an expense if the user is a member of its parent group.
      allow read: if isGroupMember(resource.data.groupId) || isUserAdmin();
      
      // Allow creating an expense if the user is a member of the parent group.
      // `request.resource.data` is used for write operations (create, update, delete).
      allow create: if isGroupMember(request.resource.data.groupId) || isUserAdmin();

      // Allow updating/deleting an expense if the user paid for it OR is an admin.
      allow update, delete: if (isUserAuthenticated() && request.auth.uid == resource.data.paidById) || isUserAdmin();
    }

    // SETTLEMENTS collection
    match /settlements/{settlementId} {
      // Allow reading a settlement if the user is a member of its parent group.
      allow read: if isGroupMember(resource.data.groupId) || isUserAdmin();
      
      // Allow creating a settlement if the user is a member of the parent group.
      allow create: if isGroupMember(request.resource.data.groupId) || isUserAdmin();
      
      // Allow deleting a settlement only if the user made the payment OR is an admin.
      allow update, delete: if (isUserAuthenticated() && (request.auth.uid == resource.data.paidById || request.auth.uid == resource.data.paidToId)) || isUserAdmin();
    }
  }
}
