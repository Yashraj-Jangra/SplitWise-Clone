rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the requesting user is an admin.
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is a member of a specific group.
    function isGroupMember(groupId) {
      // Ensure the user is authenticated before trying to get group data.
      if (request.auth == null) {
        return false;
      }
      let group = get(/databases/$(database)/documents/groups/$(groupId));
      // Ensure the group exists and has memberIds before checking.
      return group != null && 'memberIds' in group.data && request.auth.uid in group.data.memberIds;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // A user can read or update their own profile. An admin can read/update any profile.
      allow read, update: if request.auth.uid == userId || isAdmin();
      // An authenticated user can create their own user document (e.g., on signup).
      allow create: if request.auth.uid == userId;
    }
    
    // Rules for the 'groups' collection
    match /groups/{groupId} {
      // Allow read access if the user is a member of the group or is an admin.
      allow read: if isGroupMember(groupId) || isAdmin();
      // Allow a user to create a group if they are authenticated and are listed as the creator.
      allow create: if request.auth.uid == request.resource.data.createdById;
      // Allow updates if the user is a member of the group or is an admin.
      allow update: if isGroupMember(groupId) || isAdmin();
      // Do not allow direct deletion of groups. They should be archived via an update.
      allow delete: if false; 
    }
    
    // Rules for collections associated with a group
    match /{collection}/{docId} {
      // This rule applies to expenses, settlements, and history.
      // It allows access if the user is a member of the associated group or is an admin.
      allow read, write, delete: if isGroupMember(request.resource.data.groupId) || isAdmin();
      allow create: if isGroupMember(request.resource.data.groupId) || isAdmin();
    }
    
    // Rules for the 'settings' collection
    match /settings/{settingId} {
      // Only admins can read or write to the settings collection.
      allow read, write: if isAdmin();
    }
  }
}
