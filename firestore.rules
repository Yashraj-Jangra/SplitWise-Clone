
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // --- Collections ---
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isUser(userId);
      allow update: if isUser(userId);
      allow delete: if false; // Users cannot delete their own accounts
    }
    
    match /groups/{groupId} {
        allow read, update: if isSignedIn() && resource.data.memberIds.hasAny([request.auth.uid]);
        allow create: if isSignedIn(); // Checked in app logic
        allow delete: if false; // Groups are archived, not deleted
    }

    match /expenses/{expenseId} {
        // Any group member can read, create, update, or delete expenses.
        // This relies on the `groupMemberIds` array being correctly stored on each expense document.
        allow read, delete: if isSignedIn() && resource.data.groupMemberIds.hasAny([request.auth.uid]);
        allow create, update: if isSignedIn() && request.resource.data.groupMemberIds.hasAny([request.auth.uid]);
    }
    
    match /settlements/{settlementId} {
        // Any group member can manage settlements.
        allow read, delete: if isSignedIn() && resource.data.groupMemberIds.hasAny([request.auth.uid]);
        allow create, update: if isSignedIn() && request.resource.data.groupMemberIds.hasAny([request.auth.uid]);
    }

    match /history/{historyId} {
        allow read: if isSignedIn() && resource.data.groupMemberIds.hasAny([request.auth.uid]);
        allow create: if isSignedIn();
        allow update, delete: if false; // History is immutable for users
    }
    
    match /settings/{docId} {
        allow read: if true; // Public settings
        allow write: if false; // Only modifiable via admin panel/backend logic
    }
  }
}
