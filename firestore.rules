
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user is a member of a group
    function isGroupMember(groupId) {
      return get(/databases/$(database)/documents/groups/$(groupId)).data.memberIds.has(request.auth.uid);
    }
    
    // Helper function to check if a user is an admin
    function isAdmin() {
      // Check for the existence of the user document before accessing its data.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users can read/update their own profile.
    // Anyone can create a user profile (signup).
    // Authenticated users can read other users' profiles (for displaying names, etc.)
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if true;
      allow update: if isAuthenticated() && request.auth.uid == userId;
    }

    // Groups can be read/updated by their members.
    match /groups/{groupId} {
      allow read, update, delete: if isAuthenticated() && isGroupMember(groupId);
      allow create: if isAuthenticated();
    }

    // Expenses can be read/created/updated/deleted by group members.
    match /expenses/{expenseId} {
      // `resource` is the document *before* the operation.
      // `request.resource` is the document *after* the operation.
      allow read, delete: if isAuthenticated() && isGroupMember(resource.data.groupId);
      allow create: if isAuthenticated() && isGroupMember(request.resource.data.groupId);
      allow update: if isAuthenticated() && isGroupMember(request.resource.data.groupId);
    }

    // Settlements can be read/created by group members.
    match /settlements/{settlementId} {
      allow read: if isAuthenticated() && isGroupMember(resource.data.groupId);
      allow create: if isAuthenticated() && isGroupMember(request.resource.data.groupId);
      // Settlements are generally immutable, but let's allow updates/deletes by group members for now.
      allow update, delete: if isAuthenticated() && isGroupMember(resource.data.groupId);
    }
    
    // History can be read by group members.
    // Creation is handled by backend logic (simulated here), so we'll allow creation by group members.
    // Deletion is restricted to admins.
    match /history/{historyId} {
        allow read: if isAuthenticated() && isGroupMember(resource.data.groupId);
        allow create: if isAuthenticated() && isGroupMember(request.resource.data.groupId);
        allow delete: if isAuthenticated() && isAdmin();
    }
  }
}
