
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Checks if the requesting user is a member of a specific group.
    function isGroupMember(groupId) {
      return isAuthenticated() && get(/databases/$(database)/documents/groups/$(groupId)).data.memberIds.hasAny([request.auth.uid]);
    }
    
    // --- Collection Rules ---

    // User Profiles
    match /users/{userId} {
      // Any authenticated user can view other user profiles.
      // This is needed to display names/avatars of members within a group.
      allow read: if isAuthenticated();
      
      // A user can create their own profile document.
      // Rule prevents a user from creating a profile for someone else or assigning an admin role.
      allow create: if isOwner(userId)
                    && request.resource.data.uid == userId
                    && (request.resource.data.role == 'user' || request.resource.data.email == 'jangrayash1505@gmail.com');
      
      // A user can update their own profile, but cannot change their role.
      allow update: if isOwner(userId) 
                    && request.resource.data.role == resource.data.role;
    }
    
    // Groups
    match /groups/{groupId} {
      // Allow read/update if the user is a member of the group.
      allow read, update: if isGroupMember(groupId);
      
      // Allow create if the user is including themselves as a member in the new group.
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.memberIds;
    }
    
    // Expenses
    match /expenses/{expenseId} {
      // Allow read/update/delete if user is a member of the expense's parent group.
      allow read, update, delete: if isGroupMember(get(/databases/$(database)/documents/expenses/$(expenseId)).data.groupId);
      
      // Allow create if user is a member of the group they're adding the expense to.
      allow create: if isGroupMember(request.resource.data.groupId);
    }
    
    // Settlements
    match /settlements/{settlementId} {
      // Allow read/delete if user is a member of the settlement's parent group.
      allow read, delete: if isGroupMember(get(/databases/$(database)/documents/settlements/$(settlementId)).data.groupId);
      
      // Allow create if user is a member of the group they're adding the settlement to.
      allow create: if isGroupMember(request.resource.data.groupId);
    }
  }
}
