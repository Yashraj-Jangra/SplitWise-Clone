rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function hasAdminRole() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- Rules ---
    
    match /settings/general {
      // Allow public read for site settings (e.g., app name for SSR).
      // Writes are restricted to admins.
      allow get: if true;
      allow write: if hasAdminRole();
    }

    match /users/{userId} {
      // Any authenticated user can read a user profile (for adding to groups).
      // Only the owner or an admin can update a profile.
      allow get: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || hasAdminRole();
    }

    match /groups/{groupId} {
      // You can read/list a group if you are in its memberIds list.
      // The `read` permission covers both `get` and `list` operations.
      // The client query for listing groups is constrained by `where('memberIds', 'array-contains', uid)`.
      allow read: if isSignedIn() && request.auth.uid in resource.data.memberIds;
      
      // You can create a group if you are the creator and are included in the member list.
      allow create: if isSignedIn() && 
                     request.auth.uid == request.resource.data.createdById &&
                     request.auth.uid in request.resource.data.memberIds;
                     
      // You can update a group if you are a member.
      allow update: if isSignedIn() && request.auth.uid in resource.data.memberIds;
    }

    match /expenses/{expenseId} {
      // You can read/list expenses if you are in the expense's denormalized groupMemberIds list.
      // This supports the client's secure query: where('groupMemberIds', 'array-contains', uid).
      allow read: if isSignedIn() && request.auth.uid in resource.data.groupMemberIds;

      // You can create an expense if you are a member of the target group.
      // This uses a `get` to check the group document.
      allow create: if isSignedIn() && 
                     request.auth.uid in get(/databases/$(database)/documents/groups/$(request.resource.data.groupId)).data.memberIds;

      // You can modify an expense if you are a member of its group.
      allow update, delete: if isSignedIn() && 
                             request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.memberIds;
    }
    
    match /settlements/{settlementId} {
      // Rules mirror the expenses collection for consistency.
      allow read: if isSignedIn() && request.auth.uid in resource.data.groupMemberIds;

      allow create: if isSignedIn() && 
                     request.auth.uid in get(/databases/$(database)/documents/groups/$(request.resource.data.groupId)).data.memberIds;
                     
      allow update, delete: if isSignedIn() && 
                             request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.memberIds;
    }
    
    match /history/{historyId} {
      // History is readable by group members.
      allow read: if isSignedIn() && request.auth.uid in resource.data.groupMemberIds;

      // Only admins can write to the history log to maintain audit integrity.
      allow write: if hasAdminRole();
    }
  }
}
