rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS to make rules clearer and reusable.
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwnRecord(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      // Securely checks if the currently signed-in user has the 'admin' role in their user document.
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // SETTINGS COLLECTION
    match /settings/general {
      // ANYONE can read the general site settings. This is required for public pages and server-side rendering.
      allow get: if true;
      // ONLY an admin can change the site settings.
      allow write: if isAdmin();
    }

    // USERS COLLECTION
    match /users/{userId} {
      // Any signed-in user can view other user profiles (needed for names/avatars in groups) and list users (for member search).
      allow get, list: if isSignedIn();
      
      // A user can only create their OWN profile document.
      allow create: if isOwnRecord(userId);
      
      // A user can update their OWN profile. An admin can update ANY profile.
      allow update: if isOwnRecord(userId) || isAdmin();
    }

    // GROUPS COLLECTION
    match /groups/{groupId} {
      // A user can get or update a group's details if their UID is in the group's `memberIds` array.
      allow get, update: if isSignedIn() && request.auth.uid in resource.data.memberIds;
      
      // Any signed-in user can query for groups. The client-side code MUST be trusted to filter these
      // correctly (e.g., using `where('memberIds', 'array-contains', auth.uid)`), which it does.
      allow list: if isSignedIn();
      
      // Any signed-in user can create a new group.
      allow create: if isSignedIn();
    }
    
    // EXPENSES COLLECTION
    match /expenses/{expenseId} {
      // A user can perform any action on an expense if their UID is in the expense's `groupMemberIds` array.
      // This array is added to every expense by the application logic to ensure this security rule works efficiently.
      allow read, write, delete: if isSignedIn() && request.auth.uid in resource.data.groupMemberIds;
    }
    
    // SETTLEMENTS COLLECTION
    match /settlements/{settlementId} {
      // Similar to expenses, access is granted if the user is part of the group associated with the settlement.
      allow read, write, delete: if isSignedIn() && request.auth.uid in resource.data.groupMemberIds;
    }
    
    // HISTORY COLLECTION
    match /history/{historyId} {
      // Group members can read and create history events for their groups.
      allow read, create: if isSignedIn() && request.auth.uid in resource.data.groupMemberIds;
      // Only admins are allowed to delete history events.
      allow delete: if isAdmin();
    }
  }
}
