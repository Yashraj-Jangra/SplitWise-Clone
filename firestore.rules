rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      // Check for admin role in the user's document in the 'users' collection
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // --- Collections ---
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isUser(userId);
      allow update: if isUser(userId);
      allow delete: if false; // Users cannot delete their own accounts
    }
    
    match /groups/{groupId} {
        // Members and Admins can read/update.
        allow read, update: if isSignedIn() && (resource.data.memberIds.hasAny([request.auth.uid]) || isAdmin());
        allow create: if isSignedIn(); // Checked in app logic
        allow delete: if false; // Groups are archived, not deleted
    }

    match /expenses/{expenseId} {
        // Members and Admins can perform any action on expenses.
        allow read, delete: if isSignedIn() && (resource.data.groupMemberIds.hasAny([request.auth.uid]) || isAdmin());
        allow create, update: if isSignedIn() && (request.resource.data.groupMemberIds.hasAny([request.auth.uid]) || isAdmin());
    }
    
    match /settlements/{settlementId} {
        // Members and Admins can manage settlements.
        allow read, delete: if isSignedIn() && (resource.data.groupMemberIds.hasAny([request.auth.uid]) || isAdmin());
        allow create, update: if isSignedIn() && (request.resource.data.groupMemberIds.hasAny([request.auth.uid]) || isAdmin());
    }

    match /history/{historyId} {
        allow read: if isSignedIn() && (resource.data.groupMemberIds.hasAny([request.auth.uid]) || isAdmin());
        // Only members or admins can create history for a group they can access.
        allow create: if isSignedIn() && (request.resource.data.groupMemberIds.hasAny([request.auth.uid]) || isAdmin());
        // Allow members/admins to update only the 'restored' field
        allow update: if (isSignedIn() && (resource.data.groupMemberIds.hasAny([request.auth.uid]) || isAdmin())) && request.resource.data.keys().hasOnly(['restored']);
        // Only admins can delete history events
        allow delete: if isAdmin();
    }
    
    match /settings/{docId} {
        allow read: if true; // Public settings
        // Only admins can write to settings
        allow write: if isAdmin();
    }
  }
}
