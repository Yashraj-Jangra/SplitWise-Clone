
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      // An admin role must exist on the user's profile document.
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isGroupMember(groupId) {
      // The user's UID must be in the group's memberIds list.
      let group = get(/databases/$(database)/documents/groups/$(groupId));
      return isSignedIn() && request.auth.uid in group.data.memberIds;
    }

    function incomingData() {
      return request.resource.data;
    }
    
    function existingData() {
      return resource.data;
    }
    
    // --- User Profiles ---
    match /users/{userId} {
      // Admins and the user themselves can read/write.
      allow read, write: if isAdmin() || isUser(userId);
      
      // Any signed-in user can list users (for inviting to groups).
      allow list: if isSignedIn();
    }

    // --- Groups ---
    match /groups/{groupId} {
      // Admins or group members can read a specific group.
      allow read: if isAdmin() || isGroupMember(groupId);
      
      // A user can list groups if their query is for groups they are a member of.
      // Firestore security rules check this automatically on `array-contains` queries.
      allow list: if isSignedIn();
      
      // A user can create a group if they are the creator and are including themselves as a member.
      allow create: if isSignedIn()
                    && isUser(incomingData().createdById)
                    && request.auth.uid in incomingData().memberIds;

      // Admins or group members can update a group (e.g., add members).
      allow update: if isAdmin() || isGroupMember(groupId);

      // Only admins can delete a group.
      allow delete: if isAdmin();
    }

    // --- Expenses ---
    match /expenses/{expenseId} {
       // Admins or members of the expense's group can read it.
      allow read: if isAdmin() || isGroupMember(existingData().groupId);

      // A user can query expenses. The application's queries will filter by groupId or participantIds.
      allow list: if isSignedIn();

      // Admins or members of the group can create, update, or delete expenses for that group.
      allow create: if isSignedIn() && isGroupMember(incomingData().groupId);
      allow update, delete: if isAdmin() || isGroupMember(existingData().groupId);
    }
    
    // --- Settlements ---
    match /settlements/{settlementId} {
      // Admins or members of the settlement's group can read it.
      allow read: if isAdmin() || isGroupMember(existingData().groupId);
      
      // A user can query settlements.
      allow list: if isSignedIn();
      
      // Admins or members of the group can create, update, or delete settlements for that group.
      allow create: if isSignedIn() && isGroupMember(incomingData().groupId);
      allow update, delete: if isAdmin() || isGroupMember(existingData().groupId);
    }
  }
}
