rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Site settings can be read by anyone
    match /settings/general {
      allow read: if true;
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Users can be read by any authenticated user
    // Users can only be created by anyone, but can only be updated by the user themselves or an admin.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if true;
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
    }

    // A user can read/write to a group/expense/settlement/history only if they are a member of that group.
    // Admins have full read/write access to all of these collections.
    
    match /groups/{groupId} {
      allow read, write: if request.auth != null && resource.data.memberIds.hasAny([request.auth.uid]);
      allow read, write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    match /expenses/{expenseId} {
      allow read, write: if request.auth != null && resource.data.groupMemberIds.hasAny([request.auth.uid]);
      allow read, write: if request.auth != null && isAdmin(request.auth.uid);
    }

    match /settlements/{settlementId} {
      allow read, write: if request.auth != null && resource.data.groupMemberIds.hasAny([request.auth.uid]);
      allow read, write: if request.auth != null && isAdmin(request.auth.uid);
    }

    match /history/{historyId} {
      allow read, write: if request.auth != null && resource.data.groupMemberIds.hasAny([request.auth.uid]);
      allow read, write: if request.auth != null && isAdmin(request.auth.uid);
    }
  }
}
