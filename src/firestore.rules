
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Requires a get() call, use for write/get operations, not list
    function isGroupMember(groupId) {
      let groupDoc = get(/databases/$(database)/documents/groups/$(groupId));
      return isAuth() && (
        (request.auth.uid in groupDoc.data.memberIds) || 
        groupDoc.data.createdById == request.auth.uid
      );
    }
    
    // --- User Profiles ---
    match /users/{userId} {
      // Users can see their own profile, admins can see any
      allow get: if isAuth() && (request.auth.uid == userId || isAdmin());
      // Users can see a list of users (for adding to groups)
      allow list: if isAuth();
      // Users can create their own profile on signup
      allow create: if isAuth() && request.auth.uid == userId;
      // Users can update their own profile, admins can update any
      allow update: if isAuth() && (request.auth.uid == userId || isAdmin());
      // No one can delete a user profile through the app
      allow delete: if false; 
    }

    // --- Groups ---
    match /groups/{groupId} {
      // Admins can read/write anything
      allow read, write: if isAdmin();
      
      // Group members can read the group document
      allow get: if isGroupMember(groupId);
      // Users can list groups they are a member of
      allow list: if isAuth() && request.auth.uid in resource.data.memberIds;
      // Any authenticated user can create a group
      allow create: if isAuth() && request.resource.data.createdById == request.auth.uid;
      // Group creators can update the group (e.g. add members). Archiving is a special update.
      allow update: if isGroupMember(groupId);
      // Delete is handled by a special admin function, not direct client delete.
      allow delete: if isAdmin();
    }
    
    // --- Expenses ---
    match /expenses/{expenseId} {
       // Allow read if user is a member of the group this expense belongs to (using denormalized data), or an admin
      allow read: if (isAuth() && request.auth.uid in resource.data.groupMemberIds) || isAdmin();
      // Allow write if user is a member of the group (checking canonical source), or an admin
      allow write: if isGroupMember(request.resource.data.groupId) || isAdmin();
    }
    
    // --- Settlements ---
    match /settlements/{settlementId} {
      // Allow read if user is a member of the group this settlement belongs to (using denormalized data), or an admin
      allow read: if (isAuth() && request.auth.uid in resource.data.groupMemberIds) || isAdmin();
      // Allow write if user is a member of the group (checking canonical source), or an admin
      allow write: if isGroupMember(request.resource.data.groupId) || isAdmin();
    }

    // --- History ---
    match /history/{historyId} {
      // Allow read if user is a member of the group this event belongs to (using denormalized data), or an admin
      allow read: if (isAuth() && request.auth.uid in resource.data.groupMemberIds) || isAdmin();
      // History is only created/deleted on the server via actions
      allow write: if false; 
      allow delete: if isAdmin(); // Admin can delete history events
    }
  }
}
